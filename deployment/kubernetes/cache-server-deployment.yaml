apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache-server
  namespace: cache-middleware
  labels:
    app: cache-server
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cache-server
  template:
    metadata:
      labels:
        app: cache-server
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: cache-server
      containers:
      - name: cache-server
        image: cache-middleware/cache-server:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: management
          containerPort: 9090
          protocol: TCP
        - name: grpc
          containerPort: 50051
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes,redis,mysql"
        - name: CACHE_STORAGE_TYPE
          value: "redis"
        - name: REDIS_HOST
          value: "cache-redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: MYSQL_HOST
          value: "cache-mysql-service"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: database
        - name: MYSQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        - name: JAVA_OPTS
          value: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication"
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 9090
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: cache-server-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: cache-server-data-pvc
      - name: logs-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cache-server
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "cache-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: cache-server-service
  namespace: cache-middleware
  labels:
    app: cache-server
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: management
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: grpc
    port: 50051
    targetPort: 50051
    protocol: TCP
  selector:
    app: cache-server

---
apiVersion: v1
kind: Service
metadata:
  name: cache-server-headless
  namespace: cache-middleware
  labels:
    app: cache-server
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: grpc
    port: 50051
    targetPort: 50051
  selector:
    app: cache-server

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cache-server-ingress
  namespace: cache-middleware
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - cache-api.example.com
    secretName: cache-server-tls
  rules:
  - host: cache-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: cache-server-service
            port:
              number: 8080

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cache-server-pdb
  namespace: cache-middleware
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: cache-server